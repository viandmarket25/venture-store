import { AssignStockLocationsToChannelInput, CreateStockLocationInput, DeleteStockLocationInput, DeletionResponse, RemoveStockLocationsFromChannelInput, UpdateStockLocationInput } from '@vendure/common/lib/generated-types';
import { ID, PaginatedList } from '@vendure/common/lib/shared-types';
import { RelationPaths, RequestContext } from '../../api/index';
import { RequestContextCacheService } from '../../cache/index';
import { ListQueryOptions } from '../../common/index';
import { ConfigService } from '../../config/index';
import { TransactionalConnection } from '../../connection/index';
import { OrderLine } from '../../entity/index';
import { StockLocation } from '../../entity/stock-location/stock-location.entity';
import { ListQueryBuilder } from '../helpers/list-query-builder/list-query-builder';
import { RequestContextService } from '../helpers/request-context/request-context.service';
import { ChannelService } from './channel.service';
import { RoleService } from './role.service';
export declare class StockLocationService {
    private requestContextService;
    private connection;
    private channelService;
    private roleService;
    private listQueryBuilder;
    private configService;
    private requestContextCache;
    constructor(requestContextService: RequestContextService, connection: TransactionalConnection, channelService: ChannelService, roleService: RoleService, listQueryBuilder: ListQueryBuilder, configService: ConfigService, requestContextCache: RequestContextCacheService);
    initStockLocations(): Promise<void>;
    findOne(ctx: RequestContext, stockLocationId: ID): Promise<StockLocation | undefined>;
    findAll(ctx: RequestContext, options?: ListQueryOptions<StockLocation>, relations?: RelationPaths<StockLocation>): Promise<PaginatedList<StockLocation>>;
    create(ctx: RequestContext, input: CreateStockLocationInput): Promise<StockLocation>;
    update(ctx: RequestContext, input: UpdateStockLocationInput): Promise<StockLocation>;
    delete(ctx: RequestContext, input: DeleteStockLocationInput): Promise<DeletionResponse>;
    assignStockLocationsToChannel(ctx: RequestContext, input: AssignStockLocationsToChannelInput): Promise<StockLocation[]>;
    removeStockLocationsFromChannel(ctx: RequestContext, input: RemoveStockLocationsFromChannelInput): Promise<StockLocation[]>;
    getAllStockLocations(ctx: RequestContext): Promise<StockLocation[]>;
    defaultStockLocation(ctx: RequestContext): Promise<StockLocation>;
    getAllocationLocations(ctx: RequestContext, orderLine: OrderLine, quantity: number): Promise<import("../../config/index").LocationWithQuantity[]>;
    getReleaseLocations(ctx: RequestContext, orderLine: OrderLine, quantity: number): Promise<import("../../config/index").LocationWithQuantity[]>;
    getSaleLocations(ctx: RequestContext, orderLine: OrderLine, quantity: number): Promise<import("../../config/index").LocationWithQuantity[]>;
    getCancellationLocations(ctx: RequestContext, orderLine: OrderLine, quantity: number): Promise<import("../../config/index").LocationWithQuantity[]>;
    private ensureDefaultStockLocationExists;
}
