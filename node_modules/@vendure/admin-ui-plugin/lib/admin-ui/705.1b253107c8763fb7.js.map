{"version":3,"file":"705.1b253107c8763fb7.js","mappings":"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","names":["i0","HealthCheckComponent_div_6_ng_container_4_Template","HealthCheckComponent_div_6_ng_template_5_Template","_c0","status_r2","_r4","ctx_r0","healthCheckService","lastCheck$","HealthCheckComponent_tr_28_ng_container_5_Template","HealthCheckComponent_tr_28_ng_template_6_Template","row_r6","key","result","status","_r8","message","HealthCheckComponent","constructor","this","t","i1","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","HealthCheckComponent_div_6_Template","refresh","HealthCheckComponent_tr_28_Template","status$","details$","job","progress","JobStateLabelComponent","iconShape","state","JobState","colorType","inputs","JobStateLabelComponent_span_4_Template","item_r8","name","JobListComponent_ng_template_20_ng_container_0_Template","JobListComponent_ng_template_20_ng_template_1_Template","_r10","job_r13","id","job_r14","createdAt","job_r15","queueName","job_r16","data","JobListComponent_ng_template_37_vdr_dropdown_0_Template","job_r19","attempts","retries","JobListComponent_ng_template_40_div_1_Template","JobListComponent_ng_template_40_div_2_Template","job_r24","duration","job_r25","error","_r33","item","ctx_r31","cancelJob","JobListComponent_ng_template_46_vdr_dropdown_0_Template","JobListComponent_ng_template_46_vdr_dropdown_1_Template","JobListComponent_ng_template_46_vdr_dropdown_2_Template","ctx_r7","hasResult","isSettled","JobListComponent","BaseListComponent","dataService","modalService","notificationService","router","route","super","liveUpdate","UntypedFormControl","hideSettled","queueFilter","setQueryFn","args","settings","getAllJobs","jobs","skip","take","options","filter","value","eq","sort","SortOrder","ngOnInit","timer","pipe","takeUntil","destroy$","subscribe","queues$","getJobQueues","mapStream","res","jobQueues","map","queues","running","Object","keys","length","i2","features","JobListComponent_ng_template_20_Template","$event","setPageNumber","setItemsPerPage","JobListComponent_ng_template_28_Template","JobListComponent_ng_template_31_Template","JobListComponent_ng_template_34_Template","JobListComponent_ng_template_37_Template","JobListComponent_ng_template_40_Template","JobListComponent_ng_template_43_Template","JobListComponent_ng_template_46_Template","items$","itemsPerPage$","totalItems$","currentPage$","systemRoutes","path","component","breadcrumb","_","SystemModule","oAB","cJS","SharedModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/lib/system/src/components/health-check/health-check.component.html","./src/lib/system/src/components/health-check/health-check.component.ts","./src/lib/system/src/components/job-state-label/job-state-label.component.html","./src/lib/system/src/components/job-state-label/job-state-label.component.ts","./src/lib/system/src/components/job-list/job-list.component.html","./src/lib/system/src/components/job-list/job-list.component.ts","./src/lib/system/src/system.routes.ts","./src/lib/system/src/system.module.ts"],"sourcesContent":["<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n                    <div class=\"status-icon\">\r\n                        <clr-icon\r\n                            [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                            [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                            size=\"48\"\r\n                        ></clr-icon>\r\n                    </div>\r\n                    <div class=\"status-detail\">\r\n                        <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                            {{ 'system.health-all-systems-up' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #error>\r\n                            {{ 'system.health-error' | translate }}\r\n                        </ng-template>\r\n                        <div class=\"last-checked\">\r\n                            {{ 'system.health-last-checked' | translate }}:\r\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n                <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n                    <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n                </button>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"left\">\r\n                        {{ 'common.name' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-status' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-message' | translate }}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n                    <td class=\"align-middle left\">{{ row.key }}</td>\r\n                    <td class=\"align-middle left\">\r\n                        <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                            <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                                <clr-icon shape=\"check-circle\"></clr-icon>\r\n                                {{ 'system.health-status-up' | translate }}\r\n                            </ng-container>\r\n                            <ng-template #down>\r\n                                <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                                {{ 'system.health-status-down' | translate }}\r\n                            </ng-template>\r\n                        </vdr-chip>\r\n                    </td>\r\n                    <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { HealthCheckService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-health-check',\r\n    templateUrl: './health-check.component.html',\r\n    styleUrls: ['./health-check.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HealthCheckComponent {\r\n    constructor(public healthCheckService: HealthCheckService) {}\r\n}\r\n","<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { JobInfoFragment, JobState } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-job-state-label',\r\n    templateUrl: './job-state-label.component.html',\r\n    styleUrls: ['./job-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class JobStateLabelComponent {\r\n    @Input()\r\n    job: JobInfoFragment;\r\n\r\n    get iconShape(): string {\r\n        switch (this.job.state) {\r\n            case JobState.COMPLETED:\r\n                return 'check-circle';\r\n            case JobState.FAILED:\r\n                return 'exclamation-circle';\r\n            case JobState.CANCELLED:\r\n                return 'ban';\r\n            case JobState.PENDING:\r\n            case JobState.RETRYING:\r\n                return 'hourglass';\r\n            case JobState.RUNNING:\r\n                return 'sync';\r\n        }\r\n    }\r\n\r\n    get colorType(): string {\r\n        switch (this.job.state) {\r\n            case JobState.COMPLETED:\r\n                return 'success';\r\n            case JobState.FAILED:\r\n            case JobState.CANCELLED:\r\n                return 'error';\r\n            case JobState.PENDING:\r\n            case JobState.RETRYING:\r\n                return '';\r\n            case JobState.RUNNING:\r\n                return 'warning';\r\n        }\r\n    }\r\n}\r\n","<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <clr-checkbox-wrapper class=\"mr-2\">\r\n                    <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\" />\r\n                    <label>{{ 'common.live-update' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n                <clr-checkbox-wrapper>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrCheckbox\r\n                        [formControl]=\"hideSettled\"\r\n                        name=\"hide-settled\"\r\n                        (change)=\"refresh()\"\r\n                    />\r\n                    <label>{{ 'system.hide-settled-jobs' | translate }}</label>\r\n                </clr-checkbox-wrapper></vdr-ab-left\r\n            >\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n                <ng-select\r\n                    [addTag]=\"false\"\r\n                    [items]=\"queues$ | async\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    bindValue=\"name\"\r\n                    [formControl]=\"queueFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                        <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                            {{ 'system.all-job-queues' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #others>\r\n                            <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n\r\n    <vdr-data-table-2\r\n        id=\"job-list\"\r\n        [items]=\"items$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        [currentPage]=\"currentPage$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.createdAt | timeAgo }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-queue-name' | translate\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-data' | translate\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"job.data\">\r\n                    <button\r\n                        class=\"btn btn-link btn-icon\"\r\n                        vdrDropdownTrigger\r\n                        [title]=\"'system.job-data' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-state' | translate\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n                <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">after {{ job.attempts }} attempts</div>\r\n                <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\" class=\"retry-info\">\r\n                    attempting {{ job.attempts + 1 }} of {{ job.retries }}\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-duration' | translate\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.duration | duration }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-result' | translate\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                    <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                        {{ 'system.job-result' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"job.error\">\r\n                    <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.job-error' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            {{ job.error }}\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"cancelJob(job.id)\"\r\n                            [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.cancel' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAllJobsQuery,\r\n    GetJobQueueListQuery,\r\n    ItemOf,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable, timer } from 'rxjs';\r\nimport { filter, map, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-job-list',\r\n    templateUrl: './job-list.component.html',\r\n    styleUrls: ['./job-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class JobListComponent\r\n    extends BaseListComponent<GetAllJobsQuery, ItemOf<GetAllJobsQuery, 'jobs'>>\r\n    implements OnInit\r\n{\r\n    queues$: Observable<GetJobQueueListQuery['jobQueues']>;\r\n    liveUpdate = new UntypedFormControl(true);\r\n    hideSettled = new UntypedFormControl(true);\r\n    queueFilter = new UntypedFormControl('all');\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getAllJobs(...args),\r\n            data => data.jobs,\r\n            (skip, take) => {\r\n                const queueFilter =\r\n                    this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\r\n                const hideSettled = this.hideSettled.value;\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        filter: {\r\n                            ...queueFilter,\r\n                            ...(hideSettled ? { isSettled: { eq: false } } : {}),\r\n                        },\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        timer(5000, 2000)\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                filter(() => this.liveUpdate.value),\r\n            )\r\n            .subscribe(() => {\r\n                this.refresh();\r\n            });\r\n        this.queues$ = this.dataService.settings\r\n            .getJobQueues()\r\n            .mapStream(res => res.jobQueues)\r\n            .pipe(map(queues => [{ name: 'all', running: true }, ...queues]));\r\n    }\r\n\r\n    hasResult(job: ItemOf<GetAllJobsQuery, 'jobs'>): boolean {\r\n        const result = job.result;\r\n        if (result == null) {\r\n            return false;\r\n        }\r\n        if (typeof result === 'object') {\r\n            return Object.keys(result).length > 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    cancelJob(id: string) {\r\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\n\r\nexport const systemRoutes: Route[] = [\r\n    {\r\n        path: 'jobs',\r\n        component: JobListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.job-queue'),\r\n        },\r\n    },\r\n    {\r\n        path: 'system-status',\r\n        component: HealthCheckComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.system-status'),\r\n        },\r\n    },\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\nimport { JobStateLabelComponent } from './components/job-state-label/job-state-label.component';\r\nimport { systemRoutes } from './system.routes';\r\n\r\n@NgModule({\r\n    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\r\n    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\r\n})\r\nexport class SystemModule {}\r\n"],"x_google_ignoreList":[]}