{"version":3,"file":"805.8791a0b4e07c5411.js","mappings":"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","names":["i0","ctx_r0","imageCreatorUrl","imageCreator","imageUnsplashUrl","ctx_r1","imageLocation","ctx_r2","imageUrl","LoginComponent_span_35_span_2_Template","ctx_r3","brand","hideVendureBranding","hideVersion","ctx_r5","version","LoginComponent","constructor","authService","router","httpClient","this","username","password","rememberMe","ADMIN_UI_VERSION","getAppConfig","customImageUrl","loginImageUrl","loadImage","logIn","errorMessage","undefined","subscribe","result","__typename","redirect","getRedirectRoute","navigateByUrl","message","get","toPromise","then","res","updateImage","user","location","urls","regular","name","links","html","redirectTo","re","RegExp","AUTH_REDIRECT_PARAM","redirectToParam","window","search","match","length","atob","decodeURIComponent","t","i1","i2","i3","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","LoginComponent_p_8_Template","LoginComponent_p_9_Template","LoginComponent_img_10_Template","$event","LoginComponent_span_35_Template","LoginComponent_span_36_Template","LoginComponent_span_37_Template","LoginComponent_img_38_Template","_c0","LoginGuard","canActivate","route","checkAuthenticatedStatus","pipe","map","authenticated","navigate","Yz7","factory","Éµfac","providedIn","loginRoutes","path","component","pathMatch","LoginModule","oAB","cJS","SharedModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/lib/login/src/components/login/login.component.html","./src/lib/login/src/components/login/login.component.ts","./src/lib/login/src/providers/login.guard.ts","./src/lib/login/src/login.routes.ts","./src/lib/login/src/login.module.ts"],"sourcesContent":["<div class=\"login-wrapper\">\r\n    <div class=\"login-wrapper-inner\">\r\n        <div class=\"login-wrapper-image\">\r\n            <div class=\"login-wrapper-image-content\">\r\n                <div class=\"login-wrapper-image-title\">\r\n                    {{ 'common.login-image-title' | translate }}\r\n                </div>\r\n                <div class=\"login-wrapper-image-copyright\">\r\n                    <p *ngIf=\"imageCreator\" class=\"creator\">\r\n                        Photo by <a [href]=\"imageCreatorUrl\" target=\"_blank\">{{ imageCreator }}</a> on\r\n                        <a [href]=\"imageUnsplashUrl\" target=\"_blank\">Unsplash</a>\r\n                    </p>\r\n                    <p *ngIf=\"imageLocation\" class=\"location\">{{ imageLocation }}</p>\r\n                </div>\r\n            </div>\r\n            <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" [alt]=\"imageUrl\" />\r\n        </div>\r\n        <div class=\"login-wrapper-form\">\r\n            <p class=\"login-title\">\r\n                {{ 'common.login-title' | translate : { brand: hideVendureBranding ? brand : 'Vendure' } }}\r\n            </p>\r\n            <form class=\"login-form\">\r\n                <div class=\"login-group\">\r\n                    <input\r\n                        class=\"username\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        id=\"login_username\"\r\n                        [(ngModel)]=\"username\"\r\n                        [placeholder]=\"'common.username' | translate\"\r\n                    />\r\n                    <input\r\n                        class=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        id=\"login_password\"\r\n                        [(ngModel)]=\"password\"\r\n                        [placeholder]=\"'common.password' | translate\"\r\n                    />\r\n                    <clr-alert\r\n                        [clrAlertType]=\"'danger'\"\r\n                        [clrAlertClosable]=\"false\"\r\n                        [class.visible]=\"errorMessage\"\r\n                        class=\"login-error\"\r\n                    >\r\n                        <clr-alert-item>\r\n                            <span class=\"alert-text\">\r\n                                {{ errorMessage }}\r\n                            </span>\r\n                        </clr-alert-item>\r\n                    </clr-alert>\r\n                    <clr-checkbox-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            id=\"rememberme\"\r\n                            name=\"rememberme\"\r\n                            [(ngModel)]=\"rememberMe\"\r\n                        />\r\n                        <label>{{ 'common.remember-me' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                    <div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            class=\"button primary login-button\"\r\n                            (click)=\"logIn()\"\r\n                            [disabled]=\"!username || !password\"\r\n                        >\r\n                            {{ 'common.login' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"version\">\r\n                    <span *ngIf=\"brand\"\r\n                        >{{ brand }} <span *ngIf=\"!hideVendureBranding || !hideVersion\">-</span></span\r\n                    >\r\n                    <span *ngIf=\"!hideVendureBranding\">vendure</span>\r\n                    <span *ngIf=\"!hideVersion\">v{{ version }}</span>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <img class=\"login-wrapper-logo\" src=\"assets/logo-login.webp\" *ngIf=\"!hideVendureBranding\" />\r\n    </div>\r\n</div>\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ADMIN_UI_VERSION, AuthService, AUTH_REDIRECT_PARAM, getAppConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n    username = '';\r\n    password = '';\r\n    rememberMe = false;\r\n    version = ADMIN_UI_VERSION;\r\n    errorMessage: string | undefined;\r\n    brand = getAppConfig().brand;\r\n    hideVendureBranding = getAppConfig().hideVendureBranding;\r\n    hideVersion = getAppConfig().hideVersion;\r\n    customImageUrl = getAppConfig().loginImageUrl;\r\n    imageUrl = '';\r\n    imageUnsplashUrl = '';\r\n    imageLocation = '';\r\n    imageCreator = '';\r\n    imageCreatorUrl = '';\r\n\r\n    constructor(private authService: AuthService, private router: Router, private httpClient: HttpClient) {\r\n        if (this.customImageUrl) {\r\n            this.imageUrl = this.customImageUrl;\r\n        } else {\r\n            this.loadImage();\r\n        }\r\n    }\r\n\r\n    logIn(): void {\r\n        this.errorMessage = undefined;\r\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\r\n            switch (result.__typename) {\r\n                case 'CurrentUser':\r\n                    const redirect = this.getRedirectRoute();\r\n                    this.router.navigateByUrl(redirect ? redirect : '/');\r\n                    break;\r\n                case 'InvalidCredentialsError':\r\n                case 'NativeAuthStrategyError':\r\n                    this.errorMessage = result.message;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    loadImage() {\r\n        this.httpClient\r\n            .get('https://login-image.vendure.io')\r\n            .toPromise()\r\n            .then(res => {\r\n                this.updateImage(res);\r\n            });\r\n    }\r\n\r\n    updateImage(res: any) {\r\n        const user: any = (res as any).user;\r\n        const location: any = (res as any).location;\r\n\r\n        this.imageUrl = res.urls.regular + '?utm_source=Vendure+Login+Image&utm_medium=referral';\r\n        this.imageCreator = user.name;\r\n        this.imageLocation = location.name;\r\n        this.imageCreatorUrl = user.links.html + '?utm_source=Vendure+Login+Image&utm_medium=referral';\r\n        this.imageUnsplashUrl = res.links.html;\r\n    }\r\n\r\n    /**\r\n     * Attempts to read a redirect param from the current url and parse it into a\r\n     * route from which the user was redirected after a 401 error.\r\n     */\r\n    private getRedirectRoute(): string | undefined {\r\n        let redirectTo: string | undefined;\r\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\r\n        try {\r\n            const redirectToParam = window.location.search.match(re);\r\n            if (redirectToParam && 1 < redirectToParam.length) {\r\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\r\n            }\r\n        } catch (e: any) {\r\n            // ignore\r\n        }\r\n        return redirectTo;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * This guard prevents loggen-in users from navigating to the login screen.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoginGuard  {\r\n    constructor(private router: Router, private authService: AuthService) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n        return this.authService.checkAuthenticatedStatus().pipe(\r\n            map(authenticated => {\r\n                if (authenticated) {\r\n                    this.router.navigate(['/']);\r\n                }\r\n                return !authenticated;\r\n            }),\r\n        );\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { LoginGuard } from './providers/login.guard';\r\n\r\nexport const loginRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent,\r\n        pathMatch: 'full',\r\n        canActivate: [LoginGuard],\r\n    },\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { loginRoutes } from './login.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\r\n    exports: [],\r\n    declarations: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n"],"x_google_ignoreList":[]}